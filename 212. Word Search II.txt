class Solution {
public:
    
    struct TrieNode{
        TrieNode* next[26] = {NULL};
        bool is_end_here_ = false;
        string word_ = "";
    };

    TrieNode* root = new TrieNode();
    
    void addWord(string word) {
        
        TrieNode* temp = root;
        
        for (const auto& c : word) {
            if (!temp->next[c - 'a']) temp->next[c - 'a'] = new TrieNode;
            temp = temp->next[c - 'a'];
        }
        
        temp->is_end_here_ = true;
        temp->word_ = word;
    }
    
    vector<vector<int>> nbrs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    void dfs(int i,int j, TrieNode* curr, vector<vector<char>>& board, 
              vector<string>& res) {
        char c = board[i][j];
        
        // if current character doesn't exists.
        if (c == '#' || !curr->next[c - 'a']) return;
        
        board[i][j] = '#';
        
        curr = curr->next[c - 'a'];
        
        if (curr->is_end_here_ && curr->word_.size()) {
            res.push_back(curr->word_);
            curr->word_ = "";
        }
        
        for (const auto& nbr : nbrs) {
            int x = i + nbr[0];
            int y = j + nbr[1];
            
            if (x < 0 || y < 0 || x >= board.size() || y >= board[0].size())
                continue;
            
            dfs(x, y, curr, board, res);
        }      
        
        board[i][j] = c;
    }
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        
        // Create the trie out of given words.
        for (const auto& word : words) addWord(word);
        
        // Search the words in the board.
        int n = board.size(), m = board[0].size();
        vector<string> res;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dfs(i, j, root, board, res);
            }
        }
        
        return res;
    }
};