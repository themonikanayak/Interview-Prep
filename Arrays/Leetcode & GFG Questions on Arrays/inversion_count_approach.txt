INVERSION COUNT: Based on Merge Sort (divide and conquer algorithm).

Brute Force Approach: 1. Run two loops, first traversing through the whole array &
		          second one for traversing through the elements on 
		          the right of the current element and increment count of 
		          inversions if the element is smaller than the curr element in the first loop.

Approach 2 (Optimized Approach): 1. Base Case: If there is only one or less elements in the array, it means
                        			that the array is already sorted.And so no inversion count possible, so we
				return the array.
          	 	               	        2. Recursive Case: 1. Find the middle point of the array.
                             		                                        2. Recursively call inversionCount on the two subarrays divided 
                                	   			 by the middle point.
                            		                                        3. Merge two smaller sorted subarrays, by making comparisions 
                               		         			 among the elements of the two subarrays.  And incrementing the 
						 count of inversions by the number of elements remaining in the first array
						 if the element in the first array is greater than the element in the second array.  

Time Complexity:  Best & Worst Case Complexity : O(N Log N)                                 
Space Complexity:  O(N)
