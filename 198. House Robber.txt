class Solution1 {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        if(n == 0) {
            return 0;
        }
        
        if(n == 1) {
            return nums[0];
        }
        
        int last = nums[n-1], last_last = 0, curr;
        
        for(int i = n-2; i >= 0; i--) {
            curr = max(nums[i] + last_last, last);
            last_last = last;
            last = curr;
        }
        
        return curr;
    }
};

class Solution2 {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        if(n == 0) {
            return 0;
        }
        
        if(n == 1) {
            return nums[0];
        }
        
        int dp[3];
        dp[(n)%3] = 0; dp[(n-1)%3] = nums[n-1];
        
        for(int i = n-2; i >= 0; i--) {
            dp[(i%3)] = max(nums[i] + dp[(i+2)%3], dp[(i+1)%3]);
        }
        
        return dp[0];
    }
};