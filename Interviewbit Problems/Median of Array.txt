double Solution::findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    if(A.size() > B.size()) 
        return findMedianSortedArrays(B, A);

    int n1 = A.size(), n2 = B.size(), lo = 0, hi = n1, cut1, cut2, l1, l2, r1, r2;

    while(lo <= hi) {
        cut1 = lo + (hi - lo)/2;
        cut2 = (n1 + n2)/2 - cut1;

        l1 = cut1 <= 0 ? INT_MIN : A[cut1 - 1];
        l2 = cut2 <= 0 ? INT_MIN : B[cut2 - 1];
        r1 = cut1 >= n1 ? INT_MAX : A[cut1];
        r2 = cut2 >= n2 ? INT_MAX : B[cut2];

        if(l1 > r2) {
            hi = cut1 - 1;
        }
        else if (l2 > r1) {
            lo = cut1 + 1;
        }
        else {
            return (n1 + n2)%2 == 0 ? ((double) (max(l1, l2) + min(r1, r2))/2.0) :
                    min(r1, r2);
        }
    }

    return 0;
}
