class Solution {
public:
    int repeatedStringMatch(string a, string b) {
        // Pattern : b.
        // Text : a.
        // Compute LPS Array for the pattern b.
        int n = a.size(), m = b.size(), i, j;
        vector<int> lps(m, 0);
        
        for (i = 1; i < m; i++) {
            j = lps[i - 1];
            
            while (j > 0 && b[i] != b[j])
                j = lps[j - 1];
            
            if (b[i] == b[j])
                lps[i] = j + 1;
            else
                lps[i] = 0;
        }
        
        // KMP Algorithm.
        int total_len = n*(m / n + 2);
        i = 0, j = 0;
        while (i < total_len) {
            
            while (j < m && i < total_len && a[i%n] == b[j]) {
                i++; j++;
            }
              
            if (j == m)
                return ceil((float)i / n);
            
            if (j == 0)
                i++;
            else
                j = lps[j - 1];
        }
        
        return -1;
    }
};