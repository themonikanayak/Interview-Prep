/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        int sum=0;
        reqSum(root,sum);  
        return sum;
    }
    
    void reqSum(TreeNode* root,int& csum){
        if(root==NULL)
            return;
        
        //if it is a leaf node and if it is a valid left leaf node then we
        //would have already counted that in previous recursive step
        // so we will return 'cause no more possible nodes after that
        if(root->left==NULL && root->right==NULL){
            return;
        }
        
        //check if root->left is a valid left leaf node
        if(root->left!=NULL && root->left->left==NULL && root->left->right==NULL){
            csum+=root->left->val;
        }
        
        //recursive call on remaining subtrees
        //sum will automatically be updated as it is passed by reference
        reqSum(root->left,csum);
        reqSum(root->right,csum);
    }
};