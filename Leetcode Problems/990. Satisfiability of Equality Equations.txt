class Solution {
public:
    void dfs(unordered_map<char,vector<char>> graph, char start, 
             unordered_map<char,int>& visited, int label) {
        
        visited[start] = label;
        
        for(auto& nbr: graph[start]){
            if(visited.find(nbr) == visited.end())
                dfs(graph, nbr, visited, label);
        }
    }
    bool equationsPossible(vector<string>& equations) {
        
        //Step 1. Construct Graph
        unordered_map<char,vector<char>> graph;
        unordered_map<char,int> visited;
        
        for(auto eqn: equations){
            if(eqn[0]==eqn[3] && eqn[1]=='!'){
                return false;
            }
            if(eqn[1]=='='){
                graph[eqn[0]].push_back(eqn[3]);
                graph[eqn[3]].push_back(eqn[0]);
            }
        }
        
        //Step 2. Assign label to different provinces or connected components
        int label = 0;
        
        for(auto& node: graph){
            if(visited.find(node.first) == visited.end()){
                dfs(graph,node.first,visited, label);
                label++;
            }
        }
        
        //Step 3.Process inequality
        for(auto& eqn: equations){
            if(eqn[1] == '!'){
                if(visited.find(eqn[0]) != visited.end() && 
                    visited.find(eqn[3]) != visited.end() &&
                    visited[eqn[0]] == visited[eqn[3]]){
                    return false;
                }
            }
        }
        return true;
    }
};