class Solution {
public:
    vector<vector<int>> nbrs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    int orangesRotting(vector<vector<int>>& grid) {
        // q[0] = row index.
        // q[1] = column index.
        // q[2] = minimum distance from a rotten orange. 
        queue<vector<int>> q;
        int m = grid.size(), n = grid[0].size(), ans = 0;
        vector<vector<bool>> visited(m, vector<bool> (n, false));
        
        // Initialize the queue.
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                // Push the rotten orange into the queue.
                // And mark them as visited.
                if(grid[i][j] == 2) {
                    q.push({i, j, 0});
                    visited[i][j] = true;
                }
            }
        }
        
        // Level Order Traversal.
        while(!q.empty()) {
            vector<int> entry = q.front();
            q.pop();
            ans = max(ans, entry[2]);
            
            // Visit all neighbors.
            for(auto& nbr : nbrs) {
                int x = entry[0] + nbr[0];
                int y = entry[1] + nbr[1];
                
                if(x < 0 || y < 0 || x >= m || y >= n || 
                  visited[x][y] || grid[x][y] != 1)
                    continue;
                
                q.push({x, y, entry[2] + 1});
                visited[x][y] = true;
            }
            
            entry.clear();
        }
        
        // Check for isolated fresh oranges.
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] != 0 && !visited[i][j]) {
                    return -1;
                }
            }
        }
        
        return ans;
    }
};