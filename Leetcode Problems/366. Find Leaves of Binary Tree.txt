/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfs(TreeNode* root, vector<vector<int>>& res) {
        // Base Case : Leaf Node.
        if(!(root->left) && !(root->right)) {
            res[0].push_back(root->val);
            return 0;
        }
        
        int count = 0;
        
        // Left Child.
        if(root->left)
            count = max(count, dfs(root->left, res));
        
        // Right Child.
        if(root->right)
            count = max(count, dfs(root->right, res));
        
        // Insert current Node in the result vector.
        if((count + 1) >= res.size())
            res.push_back({});
        
        res[count + 1].push_back(root->val);
        
        return count + 1;
    }
    vector<vector<int>> findLeaves(TreeNode* root) {
        if(!root) return {};
        
        vector<vector<int>> res(1);
        dfs(root, res);
        
        return res;
    }
};