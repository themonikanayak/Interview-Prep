class Solution {
public:
    vector<vector<int>> corners = {{-1, 0}, {0, -1}, {-1, -1}};
    
    int maximalSquare(vector<vector<char>>& matrix) {
        
        int n = matrix.size(), m = matrix[0].size(), side_len = 0;
        vector<vector<int>> dp(n, vector<int> (m, 0));
        
        for (int i = 0; i < n; i++) {
            if (matrix[i][0] == '1')
                dp[i][0] = 1;
            side_len = max(side_len, dp[i][0]);
        }
        
        for (int i = 0; i < m; i++) {
            if (matrix[0][i] == '1')
                dp[0][i] = 1;
            side_len = max(side_len, dp[0][i]);
        }
        
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                
                if (matrix[i][j] == '0') continue;      
                
                dp[i][j] = min(dp[i - 1][j], min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;
                
                side_len = max(side_len, dp[i][j]);
            }
        }
        
        return side_len * side_len;
    }
};