class Solution {
public:
    vector<vector<int>> nbrs = {{1, 0}, {0, 1}};
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        vector<vector<long long>> dp(m, vector<long long> (n, 0));
        
        if (obstacleGrid[m - 1][n - 1] == 1) 
            return 0;
        else
            dp[m - 1][n - 1] = 1;

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (obstacleGrid[i][j] == 1) 
                    continue;
                
                for (const auto& nbr : nbrs) {
                    int x = i + nbr[0];
                    int y = j + nbr[1];
                    
                    if (x < 0 || y < 0 || x >= m || y >= n)
                        continue;

                    dp[i][j] += dp[x][y];
                }
            }
        }

        return (int)dp[0][0];
    }
};