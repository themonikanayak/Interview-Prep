class Solution {
public:
    int last_pos_;
    map<int, bool> stone;
    map<pair<int, int>, bool> dp;
    
    bool solve(int pos, int k) {
        
        if (pos == last_pos_) 
            return true;
        
        if (pos > last_pos_ || k <= 0) 
            return false;
        
        if (dp.find({pos, k}) != dp.end())
            return dp[{pos, k}];
        
        if (stone[pos] == 1) 
            return dp[{pos, k}] = solve(pos + k, k) || solve(pos + k - 1, k - 1) 
                    || solve(pos + k + 1, k + 1);
        
        return dp[{pos, k}] = false;
    }
    bool canCross(vector<int>& stones) {
        last_pos_ = stones.back();
        
        for(int entity : stones)
            stone[entity] = 1;
        
        if (stones[1] == 1)
            return solve(1, 1);
        
        return false;
    }
};