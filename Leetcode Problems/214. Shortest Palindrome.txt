class Solution {
public:
    string shortestPalindrome(string s) {
       
        // Reverse the given string.
        string s_rev;
        int i = s.size() - 1, j;
        
        while (i >= 0) {
            s_rev.push_back(s[i]);
            i--;
        }
        
        // Concatenate the string + deliminator + reverse string.
        string concat = s + "#" + s_rev;
        
        // Calculate the lps of the concatenated string.
        // LPS of the concatenated string gives the
        // length of the longest prefix which is a palindrome.
        int n = concat.size();
        vector<int> lps(n, 0);
        
        // Initialize the lps array.
        lps[0] = 0;
        
        for (i = 1; i < n; i++) {
            j = lps[i - 1];
            
            while (j > 0 && concat[j] != concat[i]) {
                j = lps[j - 1];
            }
            
            if (concat[i] == concat[j])
                lps[i] = j + 1;
            else
                lps[i] = 0;
        }
        
        // Append the non-palindromic part in the front.
        string append = s_rev.substr(0, s.size() - lps[n - 1]);
        
        return append + s;
    }
};