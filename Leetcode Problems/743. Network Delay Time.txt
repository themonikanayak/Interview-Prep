class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        // Construct the graph.
        vector<vector<pair<int, int>>> graph(n + 1);
        
        for(const auto& edge : times) {
            graph[edge[0]].push_back({edge[2], edge[1]});
        }
        
        // Weighted dfs.
        // Declare a min priority queue.
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<bool> visited(n + 1, false);
        int res = 0, count = 0;
        
        pq.push({0, k});
        
        while(!pq.empty()) {
            pair<int, int> t = pq.top();
            pq.pop();
            
            if(visited[t.second])
                continue;
            
            // Shortest path from k to t.second.
            visited[t.second] = true;
            res = max(res, t.first);
            count++;
            
            // Push all the neighbors.
            for(const auto& nbr : graph[t.second]) {
                pq.push({nbr.first + t.first, nbr.second});
            }
        }
        
        return count == n ? res : -1;
    }
};