class Solution {
public:
    vector<vector<int>> directions = {{1, -1}, {1, 0}, {1, 1}};
    
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> dp(n, vector<int> (n, 0));
        
        for(int i = 0; i < n; i++) {
            dp[n - 1][i] = matrix[n - 1][i];
        }
        
        for(int i = n - 2; i >= 0; i--) {
            for(int j = 0; j < n; j++) {
                int val = INT_MAX;
                for(auto dirs : directions) {
                    int x = i + dirs[0];
                    int y = j + dirs[1];
                    
                    if(x < 0 || y < 0 || x >= n || y >= n) 
                        continue;
                    
                    val = min(val, dp[x][y]);
                }
                val += matrix[i][j];
                dp[i][j] = val;
            }
        }
        
        int res = INT_MAX;
        for(int i = 0; i < n; i++) {
            res = min(res, dp[0][i]);
        }
        
        return res;
    }
};