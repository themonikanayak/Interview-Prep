class Solution {
public:
    vector<vector<int>> dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    int maximumMinimumPath(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        priority_queue<vector<int>> pq;
        vector<vector<bool>> visited(m, vector<bool> (n, false));
        
        pq.push({grid[0][0], 0, 0});
        
        while(!pq.empty()) {
            vector<int> t = pq.top();
            pq.pop();
            
            if(visited[t[1]][t[2]])
                continue;
            
            visited[t[1]][t[2]] = true;
            
            if(t[1] == m - 1 && t[2] == n - 1)
                return t[0];
            
            // Push all neighbors.
            for(auto dir : dirs) {
                int x = t[1] + dir[0];
                int y = t[2] + dir[1];
                
                if(x < 0 || y < 0 || x >= m || y >= n || visited[x][y])
                    continue;
                
                pq.push({min(t[0], grid[x][y]), x, y});
            }
        }
        
        // Answer is allways possible for this question.
        // But still for handling edge cases.
        // We can return -1.
        
        return -1;
    }
};