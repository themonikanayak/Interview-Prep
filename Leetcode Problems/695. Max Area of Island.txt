class Solution {
public:
    vector<vector<int>> neighbors = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    void dfs(int i, int j, vector<vector<int>>& grid, 
             vector<vector<bool>>& visited, int& area) {
        
        // Visit the neighbors.
        for (const auto& nbr : neighbors) {
            int x = i + nbr[0];
            int y = j + nbr[1];
            
            if (x < 0 || y < 0 || x >= grid.size() || y >= grid[0].size() ||
               visited[x][y] || grid[x][y] == 0)
                continue;
            
            visited[x][y] = true;
            area++;
            dfs(x, y, grid, visited, area);
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), area = 0, max_area = 0;
        vector<vector<bool>> visited(n, vector<bool> (m, false));
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == 1) {
                    area = 1;
                    visited[i][j] = true;
                    dfs(i, j, grid, visited, area);
                    max_area = max(max_area, area);
                    cout<<area<<" ";
                }
            }
        }
        
        return max_area;
    }
};